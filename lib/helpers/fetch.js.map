{"version":3,"sources":["../../src/helpers/fetch.js"],"names":["HttpError","statusCode","body","message","name","constructor","Error","captureStackTrace","stack","status","buildFetchUrl","context","url","urlParams","stripTrailingSlashes","protocolAndDomain","remainderUrl","builtUrl","Object","keys","reduce","wipUrl","urlParam","urlParamInfo","contextAsObject","id","value","encodedValue","isQueryParamValue","replace","buildFetchOpts","method","headers","credentials","query","opts","defaultHeaders","hasBody","test","JSON","stringify","parseResponse","contentType","res","get","isJson","split","fetch","options","queryParam","queryParamValue","Promise","defaultGlobals","resolve","then","ok"],"mappings":"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","file":"fetch.js","sourcesContent":["import {isObject, isString, startsWith, endsWith} from './util';\nimport {\n  encodeUriQuery,\n  encodeUriSegment,\n  replaceUrlParamFromUrl,\n  replaceQueryStringParamFromUrl,\n  splitUrlByProtocolAndDomain\n} from './url';\nimport {defaultGlobals, defaultHeaders} from './../defaults';\n\nexport class HttpError extends Error {\n  constructor(statusCode = 500, {body, message = 'HttpError'}) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n    // Http\n    this.statusCode = statusCode;\n    this.status = statusCode;\n    this.body = body;\n  }\n}\n\nexport const buildFetchUrl = (context, {url, urlParams, stripTrailingSlashes = true}) => {\n  const [protocolAndDomain = '', remainderUrl] = splitUrlByProtocolAndDomain(url);\n  // Replace urlParams with values from context\n  let builtUrl = Object.keys(urlParams).reduce((wipUrl, urlParam) => {\n    const urlParamInfo = urlParams[urlParam];\n    const contextAsObject = !isObject(context)\n      ? {\n          id: context\n        }\n      : context;\n    const value = contextAsObject[urlParam] || ''; // self.defaults[urlParam];\n    if (value) {\n      const encodedValue = urlParamInfo.isQueryParamValue ? encodeUriQuery(value, true) : encodeUriSegment(value);\n      return replaceUrlParamFromUrl(wipUrl, urlParam, encodedValue);\n    }\n    return replaceUrlParamFromUrl(wipUrl, urlParam);\n  }, remainderUrl);\n  // Strip trailing slashes and set the url (unless this behavior is specifically disabled)\n  if (stripTrailingSlashes) {\n    builtUrl = builtUrl.replace(/\\/+$/, '') || '/';\n  }\n  return protocolAndDomain + builtUrl;\n};\n\nexport const buildFetchOpts = (context, {method, headers, credentials, query, body}) => {\n  const opts = {\n    headers: defaultHeaders\n  };\n  if (method) {\n    opts.method = method;\n  }\n  if (headers) {\n    opts.headers = {\n      ...opts.headers,\n      ...headers\n    };\n  }\n  if (credentials) {\n    opts.credentials = credentials;\n  }\n  if (query) {\n    opts.query = query;\n  }\n  const hasBody = /^(POST|PUT|PATCH)$/i.test(opts.method);\n  if (hasBody) {\n    if (body) {\n      opts.body = isString(body) ? body : JSON.stringify(body);\n    } else if (context) {\n      opts.body = isString(context) ? context : JSON.stringify(context);\n    }\n  }\n  return opts;\n};\n\nexport const parseResponse = res => {\n  const contentType = res.headers.get('Content-Type');\n  // @NOTE parses 'application/problem+json; charset=utf-8' for example\n  // see https://tools.ietf.org/html/rfc6839\n  const isJson =\n    contentType && (startsWith(contentType, 'application/json') || endsWith(contentType.split(';')[0], '+json'));\n  return res[isJson ? 'json' : 'text']();\n};\n\nconst fetch = (url, options = {}) => {\n  // Support options.query\n  const builtUrl = Object.keys(options.query || []).reduce((wipUrl, queryParam) => {\n    const queryParamValue = isString(options.query[queryParam])\n      ? options.query[queryParam]\n      : JSON.stringify(options.query[queryParam]);\n    return replaceQueryStringParamFromUrl(wipUrl, queryParam, queryParamValue);\n  }, url);\n  return (options.Promise || defaultGlobals.Promise)\n    .resolve((defaultGlobals.fetch || fetch)(builtUrl, options))\n    .then(res => {\n      if (!res.ok) {\n        return parseResponse(res).then(body => {\n          throw new HttpError(res.status, {\n            body\n          });\n        });\n      }\n      return res;\n    });\n};\n\nexport default fetch;\n"]}