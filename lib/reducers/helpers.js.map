{"version":3,"sources":["../../src/reducers/helpers.js"],"names":["reduceReducers","reducers","state","action","reduce","stateSoFar","reducer","combineReducers","reducerMap","Object","keys","innerStateSoFar","key","previousStateForKey","nextStateForKey","mergeReducers","baseReducer","combinedReducers"],"mappings":";;;;;;;;;;AAAA,IAAMA,iBAAiB,SAAjBA,cAAiB;AAAA,oCAAIC,QAAJ;AAAIA,YAAJ;AAAA;;AAAA,SAAiB,UAACC,KAAD,EAAQC,MAAR;AAAA,WACtCF,SAASG,MAAT,CAAgB,UAACC,UAAD,EAAaC,OAAb;AAAA,aAAyBA,QAAQD,UAAR,EAAoBF,MAApB,CAAzB;AAAA,KAAhB,EAAsED,KAAtE,CADsC;AAAA,GAAjB;AAAA,CAAvB;;AAGA,IAAMK,kBAAkB,SAAlBA,eAAkB;AAAA,qCAAIN,QAAJ;AAAIA,YAAJ;AAAA;;AAAA,SAAiB;AAAA,QAACC,KAAD,uEAAS,EAAT;AAAA,QAAaC,MAAb;AAAA,WACvCF,SAASG,MAAT,CACE,UAACC,UAAD,EAAaG,UAAb;AAAA,aACEC,OAAOC,IAAP,CAAYF,UAAZ,EAAwBJ,MAAxB,CAA+B,UAACO,eAAD,EAAkBC,GAAlB,EAA0B;AACvD,YAAMN,UAAUE,WAAWI,GAAX,CAAhB;AACA,YAAMC,sBAAsBR,WAAWO,GAAX,CAA5B;AACA,YAAME,kBAAkBR,QAAQO,mBAAR,EAA6BV,MAA7B,CAAxB;AACA,4BAAWQ,eAAX,sBAA6BC,GAA7B,EAAmCE,eAAnC;AACD,OALD,EAKGT,UALH,CADF;AAAA,KADF,EAQEH,KARF,CADuC;AAAA,GAAjB;AAAA,CAAxB;;AAYA,IAAMa,gBAAgB,SAAhBA,aAAgB,CAACC,WAAD,EAA8B;AAAA,qCAAbf,QAAa;AAAbA,YAAa;AAAA;;AAClD,MAAMgB,mBAAmBV,iCAAmBN,QAAnB,CAAzB;AACA,SAAO,UAACC,KAAD,EAAQC,MAAR;AAAA,WAAmBc,iBAAiBD,YAAYd,KAAZ,EAAmBC,MAAnB,CAAjB,EAA6CA,MAA7C,CAAnB;AAAA,GAAP;AACD,CAHD;;QAKQH,c,GAAAA,c;QAAgBO,e,GAAAA,e;QAAiBQ,a,GAAAA,a","file":"helpers.js","sourcesContent":["const reduceReducers = (...reducers) => (state, action) =>\n  reducers.reduce((stateSoFar, reducer) => reducer(stateSoFar, action), state);\n\nconst combineReducers = (...reducers) => (state = {}, action) =>\n  reducers.reduce(\n    (stateSoFar, reducerMap) =>\n      Object.keys(reducerMap).reduce((innerStateSoFar, key) => {\n        const reducer = reducerMap[key];\n        const previousStateForKey = stateSoFar[key];\n        const nextStateForKey = reducer(previousStateForKey, action);\n        return {...innerStateSoFar, [key]: nextStateForKey};\n      }, stateSoFar),\n    state\n  );\n\nconst mergeReducers = (baseReducer, ...reducers) => {\n  const combinedReducers = combineReducers(...reducers);\n  return (state, action) => combinedReducers(baseReducer(state, action), action);\n};\n\nexport {reduceReducers, combineReducers, mergeReducers};\n"]}