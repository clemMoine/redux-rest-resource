{"version":3,"sources":["../src/types.js"],"names":["scopeType","type","scope","scopeTypes","types","getTypesScope","resourceName","getActionTypeKey","actionId","resourcePluralName","isArray","toUpperCase","getActionType","createType","alias","typeKey","createTypes","actions","rawTypes","Object","keys","reduce","actionOpts","assign"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOC,KAAP;AAAA,SAAkBA,QAAWA,KAAX,SAAoBD,IAApB,GAA6BA,IAA/C;AAAA,CAAlB;;AAEA,IAAME,aAAa,SAAbA,UAAa;AAAA,MAACC,KAAD,uEAAS,EAAT;AAAA,MAAaF,KAAb;AAAA,SAAwBA,QAAQ,qBAAUE,KAAV,EAAiB;AAAA,WAAQJ,UAAUC,IAAV,EAAgBC,KAAhB,CAAR;AAAA,GAAjB,CAAR,GAA2DE,KAAnF;AAAA,CAAnB;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,SAAiBC,+BAA6B,0BAAeA,YAAf,CAA7B,GAA8D,EAA/E;AAAA,CAAtB;;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CACvBC,QADuB;AAAA,iFAE6D,EAF7D;AAAA,MAEtBF,YAFsB,QAEtBA,YAFsB;AAAA,mCAERG,kBAFQ;AAAA,MAERA,kBAFQ,yCAEa,yBAAcH,YAAd,CAFb;AAAA,0BAE0CI,OAF1C;AAAA,MAE0CA,OAF1C,gCAEoD,KAFpD;;AAAA,SAIvBJ,eACOE,SAASG,WAAT,EADP,SACiC,0BAAeD,UAAUD,kBAAV,GAA+BH,YAA9C,CADjC,GAEI,0BAAeE,QAAf,CANmB;AAAA,CAAzB;;AAQA,IAAMI,gBAAgB,SAAhBA,aAAgB;AAAA,SAAY,0BAAeJ,QAAf,CAAZ;AAAA,CAAtB;;AAEA,IAAMK,aAAa,SAAbA,UAAa,CAACL,QAAD,SAA0E;AAAA,MAA9DF,YAA8D,SAA9DA,YAA8D;AAAA,MAAhDG,kBAAgD,SAAhDA,kBAAgD;AAAA,4BAA5BC,OAA4B;AAAA,MAA5BA,OAA4B,iCAAlB,KAAkB;AAAA,MAAXI,KAAW,SAAXA,KAAW;;AAC3F,MAAMC,UAAUR,iBAAiBD,eAAeQ,SAASN,QAAxB,GAAmCA,QAApD,EAA8D;AAC5EF,8BAD4E;AAE5EG,0CAF4E;AAG5EC;AAH4E,GAA9D,CAAhB;AAKA,6BACGK,OADH,EACaH,cAAcJ,QAAd,CADb;AAGD,CATD;;AAWA,IAAMQ,cAAc,SAAdA,WAAc,GAAgG;AAAA,MAA/FC,OAA+F,uEAArF,EAAqF;;AAAA,kFAAP,EAAO;AAAA,MAAhFX,YAAgF,SAAhFA,YAAgF;AAAA,MAAlEG,kBAAkE,SAAlEA,kBAAkE;AAAA,0BAA9CP,KAA8C;AAAA,MAA9CA,KAA8C,+BAAtCG,cAAcC,YAAd,CAAsC;;AAClH,MAAMY,WAAWC,OAAOC,IAAP,CAAYH,OAAZ,EAAqBI,MAArB,CAA4B,UAACjB,KAAD,EAAQI,QAAR,EAAqB;AAChE,QAAMc,aAAaL,QAAQT,QAAR,CAAnB;AACA,WAAOW,OAAOI,MAAP,CACLnB,KADK,EAELS,WAAWL,QAAX,EAAqB;AACnBF,gCADmB;AAEnBG,4CAFmB;AAGnBC,eAASY,WAAWZ,OAHD;AAInBI,aAAOQ,WAAWR;AAJC,KAArB,CAFK,CAAP;AASD,GAXgB,EAWd,EAXc,CAAjB;AAYA,SAAOX,WAAWe,QAAX,EAAqBhB,KAArB,CAAP;AACD,CAdD;;QAgBQF,S,GAAAA,S;QAAWG,U,GAAAA,U;QAAYE,a,GAAAA,a;QAAeQ,U,GAAAA,U;QAAYG,W,GAAAA,W;QAAaJ,a,GAAAA,a;QAAeL,gB,GAAAA,gB","file":"types.js","sourcesContent":["import {mapObject, getPluralName, upperSnakeCase} from './helpers/util';\n\nconst scopeType = (type, scope) => (scope ? `${scope}/${type}` : type);\n\nconst scopeTypes = (types = {}, scope) => (scope ? mapObject(types, type => scopeType(type, scope)) : types);\n\nconst getTypesScope = resourceName => (resourceName ? `@@resource/${upperSnakeCase(resourceName)}` : '');\n\nconst getActionTypeKey = (\n  actionId,\n  {resourceName, resourcePluralName = getPluralName(resourceName), isArray = false} = {}\n) =>\n  resourceName\n    ? `${actionId.toUpperCase()}_${upperSnakeCase(isArray ? resourcePluralName : resourceName)}`\n    : upperSnakeCase(actionId);\n\nconst getActionType = actionId => upperSnakeCase(actionId);\n\nconst createType = (actionId, {resourceName, resourcePluralName, isArray = false, alias}) => {\n  const typeKey = getActionTypeKey(resourceName ? alias || actionId : actionId, {\n    resourceName,\n    resourcePluralName,\n    isArray\n  });\n  return {\n    [typeKey]: getActionType(actionId)\n  };\n};\n\nconst createTypes = (actions = {}, {resourceName, resourcePluralName, scope = getTypesScope(resourceName)} = {}) => {\n  const rawTypes = Object.keys(actions).reduce((types, actionId) => {\n    const actionOpts = actions[actionId];\n    return Object.assign(\n      types,\n      createType(actionId, {\n        resourceName,\n        resourcePluralName,\n        isArray: actionOpts.isArray,\n        alias: actionOpts.alias\n      })\n    );\n  }, {});\n  return scopeTypes(rawTypes, scope);\n};\n\nexport {scopeType, scopeTypes, getTypesScope, createType, createTypes, getActionType, getActionTypeKey};\n"]}